
/**
 * 
 * 	Set of constants used by the evaluation function
 * 	Contains several matrix for positional evaluation
 *  
 * 	@author Team Fairy Princess
 * 
 */

public interface Evaluation {
	

	// Knight positioning
	
	public static final int[][] W_KNIGHT_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -50, -40, -30, -25, -25, -30, -40, -50,  0, 0 },
		{ 0, 0, -35, -25, -15, -10, -10, -15, -25, -35,  0, 0 },
		{ 0, 0, -20, -10,   0,   5,   5,   0, -10, -20,  0, 0 },
		{ 0, 0, -10,   0,  10,  15,  15,  10,   0, -10,  0, 0 },
		{ 0, 0   -5,   5,  15,  20,  20,  15,   5,  -5,  0, 0 },
		{ 0, 0   -5,   5,  15,  20,  20,  15,   5,  -5,  0, 0 },
		{ 0, 0, -20, -10,   0,   5,   5,   0, -10, -20,  0, 0 },
		{ 0, 0, -75, -25, -15, -10, -10, -15, -25, -75,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] B_KNIGHT_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -75, -25, -15, -10, -10, -15, -25, -75,  0, 0 },
		{ 0, 0, -20, -10,   0,   5,   5,   0, -10, -20,  0, 0 },
		{ 0, 0   -5,   5,  15,  20,  20,  15,   5,  -5,  0, 0 },
		{ 0, 0   -5,   5,  15,  20,  20,  15,   5,  -5,  0, 0 },
		{ 0, 0, -10,   0,  10,  15,  15,  10,   0, -10,  0, 0 },
		{ 0, 0, -20, -10,   0,   5,   5,   0, -10, -20,  0, 0 },
		{ 0, 0, -35, -25, -15, -10, -10, -15, -25, -35,  0, 0 },
		{ 0, 0, -50, -40, -30, -25, -25, -30, -40, -50,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] KNIGHT_POS_END =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -10,  -5,  -5,  -5,  -5,  -5,  -5, -10,  0, 0 },
		{ 0, 0,  -5,   0,   0,   0,   0,   0,   0,  -5,  0, 0 },
		{ 0, 0,  -5,   0,   5,   5,   5,   5,   0,  -5,  0, 0 },
		{ 0, 0,  -5,   0,   5,  10,  10,   5,   0,  -5,  0, 0 },
		{ 0, 0,  -5,   0,   5,  10,  10,   5,   0,  -5,  0, 0 },
		{ 0, 0,  -5,   0,   5,   5,   5,   5,   0,  -5,  0, 0 },
		{ 0, 0,  -5,   0,   0,   0,   0,   0,   0,  -5,  0, 0 },
		{ 0, 0, -10,  -5,  -5,  -5,  -5,  -5,  -5, -10,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	
	// Bishop positioning
	
	public static final int[][] W_BISHOP_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -20, -15, -15, -13, -13, -15, -15, -20,  0, 0 },
		{ 0, 0,  -5,   0,  -5,   0,   0,  -5,   0,  -5,  0, 0 },
		{ 0, 0,  -6,  -2,   4,   2,   2,   4,  -2,  -6,  0, 0 },
		{ 0, 0,  -4,   0,   2,  10,  10,   2,   0,  -4,  0, 0 },
		{ 0, 0,  -4,   0,   2,  10,  10,   2,   0,  -4,  0, 0 },
		{ 0, 0,  -6,  -2,   4,   2,   2,   4,  -2,  -6,  0, 0 },
		{ 0, 0,  -5,   0,  -2,   0,   0,  -2,   0,  -5,  0, 0 },
		{ 0, 0,  -8,  -8,  -6,  -4,  -4,  -6,  -8,  -8,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] B_BISHOP_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,  -8,  -8,  -6,  -4,  -4,  -6,  -8,  -8,  0, 0 },
		{ 0, 0,  -5,   0,  -2,   0,   0,  -2,   0,  -5,  0, 0 },
		{ 0, 0,  -6,  -2,   4,   2,   2,   4,  -2,  -6,  0, 0 },
		{ 0, 0,  -4,   0,   2,  10,  10,   2,   0,  -4,  0, 0 },
		{ 0, 0,  -4,   0,   2,  10,  10,   2,   0,  -4,  0, 0 },
		{ 0, 0,  -6,  -2,   4,   2,   2,   4,  -2,  -6,  0, 0 },
		{ 0, 0,  -5,   0,  -5,   0,   0,  -5,   0,  -5,  0, 0 },
		{ 0, 0, -20, -15, -15, -13, -13, -15, -15, -20,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] BISHOP_POS_END =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -18, -12,  -9,  -6,  -6,  -9, -12, -18,  0, 0 },
		{ 0, 0, -12,  -6,  -3,   0,   0,  -3,  -6, -12,  0, 0 },
		{ 0, 0,  -9,  -3,   0,   3,   3,   0,  -3,  -9,  0, 0 },
		{ 0, 0,  -6,   0,   3,   6,   6,   3,   0,  -6,  0, 0 },
		{ 0, 0,  -6,   0,   3,   6,   6,   3,   0,  -6,  0, 0 },
		{ 0, 0,  -9,  -3,   0,   3,   3,   0,  -3,  -9,  0, 0 },
		{ 0, 0, -12,  -6,  -3,   0,   0,  -3,  -6, -12,  0, 0 },
		{ 0, 0, -18, -12,  -9,  -6,  -6,  -9, -12, -18,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	
	// Rook positioning 
	
	public static final int[][] W_ROOK_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0   -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0   -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] B_ROOK_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,  -6,  -3,   0,   3,   3,   0,  -3,  -6,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] ROOK_POS_END =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	
	// Queen positioning
	
	public static final int[][] W_QUEEN_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -10, -10, -10, -10, -10, -10, -10, -10,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] B_QUEEN_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0, -10, -10, -10, -10, -10, -10, -10, -10,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] QUEEN_POS_END =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -24, -16, -12,  -8,  -8, -12, -16, -24,  0, 0 },
		{ 0, 0, -16,  -8,  -4,   0,   0,  -4,  -8, -16,  0, 0 },
		{ 0, 0, -12,  -4,   0,   4,   4,   0,  -4, -12,  0, 0 },
		{ 0, 0,  -8,   0,   4,   8,   8,   4,   0,  -8,  0, 0 },
		{ 0, 0,  -8,   0,   4,   8,   8,   4,   0,  -8,  0, 0 },
		{ 0, 0, -12,  -4,   0,   4,   4,   0,  -4, -12,  0, 0 },
		{ 0, 0, -16,  -8,  -4,   0,   0,  -4,  -8, -16,  0, 0 },
		{ 0, 0, -24, -16, -12,  -8,  -8, -12, -16, -24,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	
	// Pawn positioning
	
	public static final int[][] W_PAWN_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0, -10,  -5,   0,   5,   5,   0,  -5, -10,  0, 0 },
		{ 0, 0, -10,  -5,   0,  15,  15,   0,  -5, -10,  0, 0 },
		{ 0, 0, -10,  -5,   0,  25,  25,   0,  -5, -10,  0, 0 },
		{ 0, 0, -10,  -5,   0,  15,  15,   0,  -5, -10,  0, 0 },
		{ 0, 0,  90,  95, 100, 105, 105, 100,  95,  90,  0, 0 },
		{ 0, 0, 165, 170, 175, 180, 180, 175, 170, 165,  0, 0 },
		{ 0, 0, -10,  -5,   0,   5,   5,   0,  -5, -10,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] B_PAWN_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -10,  -5,   0,   5,   5,   0,  -5, -10,  0, 0 },
		{ 0, 0, 165, 170, 175, 180, 180, 175, 170, 165,  0, 0 },
		{ 0, 0,  90,  95, 100, 105, 105, 100,  95,  90,  0, 0 },
		{ 0, 0, -10,  -5,   0,  15,  15,   0,  -5, -10,  0, 0 },
		{ 0, 0, -10,  -5,   0,  25,  25,   0,  -5, -10,  0, 0 },
		{ 0, 0, -10,  -5,   0,  15,  15,   0,  -5, -10,  0, 0 },
		{ 0, 0, -10,  -5,   0,   5,   5,   0,  -5, -10,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
		
	// Pawn positioning in endgame
	
	public static final int[][] W_PAWN_POS_END =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,  50,  50,  50,  50,  50,  50,  50,  50,  0, 0 },
		{ 0, 0, 125, 125, 125, 125, 125, 125, 125, 125,  0, 0 },
		{ 0, 0, 200, 200, 200, 200, 200, 200, 200, 200,  0, 0 },
		{ 0, 0, 350, 350, 350, 350, 350, 350, 350, 350,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] B_PAWN_POS_END =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0, 350, 350, 350, 350, 350, 350, 350, 350,  0, 0 },
		{ 0, 0, 200, 200, 200, 200, 200, 200, 200, 200,  0, 0 },
		{ 0, 0, 125, 125, 125, 125, 125, 125, 125, 125,  0, 0 },
		{ 0, 0,  50,  50,  50,  50,  50,  50,  50,  50,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	
	// King positioning
	
	public static final int[][] W_KING_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,  30,  50,   0,   0,   0,  10,  50,  30,  0, 0 },
		{ 0, 0,  20,  40,   0,   0,   0,   0,  40,  20,  0, 0 },
		{ 0, 0, -10, -20, -20, -25, -25, -20, -20, -10,  0, 0 },
		{ 0, 0, -15, -25, -40, -40, -40, -40, -25, -15,  0, 0 },
		{ 0, 0, -30, -40, -40, -40, -40, -40, -40, -30,  0, 0 },
		{ 0, 0, -40, -50, -50, -50, -50, -50, -50, -40,  0, 0 },
		{ 0, 0, -50, -50, -50, -50, -50, -50, -50, -50,  0, 0 },
		{ 0, 0, -50, -50, -50, -50, -50, -50, -50, -50,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] B_KING_POS =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -50, -50, -50, -50, -50, -50, -50, -50,  0, 0 },
		{ 0, 0, -50, -50, -50, -50, -50, -50, -50, -50,  0, 0 },
		{ 0, 0, -40, -50, -50, -50, -50, -50, -50, -40,  0, 0 },
		{ 0, 0, -30, -40, -40, -40, -40, -40, -40, -30,  0, 0 },
		{ 0, 0, -15, -25, -40, -40, -40, -40, -25, -15,  0, 0 },
		{ 0, 0, -10, -20, -20, -25, -25, -20, -20, -10,  0, 0 },
		{ 0, 0,  20,  40,   0,   0,   0,   0,  40,  20,  0, 0 },
		{ 0, 0,  30,  50,   0,   0,   0,  10,  50,  30,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	public static final int[][] KING_POS_END =
	{
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0, -20, -15, -10, -10, -10, -10, -15, -20,  0, 0 },
		{ 0, 0, -15,  -5,   0,   0,   0,   0,  -5, -15,  0, 0 },
		{ 0, 0, -10,   0,   5,   5,   5,   5,   0, -10,  0, 0 },
		{ 0, 0, -10,   0,   5,  10,  10,   5,   0, -10,  0, 0 },
		{ 0, 0, -10,   0,   5,  10,  10,   5,   0, -10,  0, 0 },
		{ 0, 0, -10,   0,   5,   5,   5,   5,   0, -10,  0, 0 },
		{ 0, 0, -15,  -5,   0,   0,   0,   0,  -5, -15,  0, 0 },
		{ 0, 0, -20, -15, -10, -10, -10, -10, -15, -20,  0, 0 },
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
		{ 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 0 },		// border
	};
	
	
	// MOVE SCORES
	
	// Hash move
	public static final byte HASH_SCORE = 100;
	
	// Killer moves
	public static final byte PRIMARY_KILLER_SCORE = 95;
	public static final byte SECONDARY_KILLER_SCORE = 90;
	
	// History moves
	public static final byte MAX_HISTORY_BONUS = 20;
	
	// Queen promotion
	public static final byte PROMOTION_QUEEN_SCORE = 80;
	
	// Pawn captures
	public static final byte KxP = 30;
	public static final byte QxP = 31;
	public static final byte RxP = 32;
	public static final byte BxP = 33;
	public static final byte NxP = 34;
	public static final byte PxP = 35;
	
	// Knight captures
	public static final byte KxN = 40;
	public static final byte QxN = 41;
	public static final byte RxN = 42;
	public static final byte BxN = 43;
	public static final byte NxN = 44;
	public static final byte PxN = 45;
	
	// Bishop captures
	public static final byte KxB = 50;
	public static final byte QxB = 51;
	public static final byte RxB = 52;
	public static final byte BxB = 53;
	public static final byte NxB = 54;
	public static final byte PxB = 55;
	
	// Rook captures
	public static final byte KxR = 60;
	public static final byte QxR = 61;
	public static final byte RxR = 62;
	public static final byte BxR = 63;
	public static final byte NxR = 64;
	public static final byte PxR = 65;
	
	// Queen captures
	public static final byte KxQ = 70;
	public static final byte QxQ = 71;
	public static final byte RxQ = 72;
	public static final byte BxQ = 73;
	public static final byte NxQ = 74;
	public static final byte PxQ = 75;
	
	
	// Ordinary piece scores
	public static final byte ORDINARY_QUEEN_SCORE = 6;
	public static final byte ORDINARY_ROOK_SCORE = 5;
	public static final byte ORDINARY_BISHOP_SCORE = 4;
	public static final byte ORDINARY_KNIGHT_SCORE = 3;
	public static final byte ORDINARY_PAWN_SCORE = 2;
	public static final byte ORDINARY_KING_SCORE = 1;
	public static final byte SHORT_CASTLE_SCORE = 2;
	public static final byte LONG_CASTLE_SCORE = 2;
	public static final byte EN_PASSANT_SCORE = PxP;
	
	public static final byte[] ORDINARY_PIECE_SCORES = {
		0, ORDINARY_KING_SCORE, ORDINARY_QUEEN_SCORE, ORDINARY_ROOK_SCORE,
		ORDINARY_BISHOP_SCORE, ORDINARY_KNIGHT_SCORE, ORDINARY_PAWN_SCORE
	};
	
	public static final byte[][] CAPTURE_SCORES = {
		{ 0, 0, 0, 0, 0, 0, 0 },				// NO PIECE IS 0
		{ 0, 0, 0, 0, 0, 0, 0 },				// KING CANNOT BE CAPTURED
		{ 0, KxQ, QxQ, RxQ, BxQ, NxQ, PxQ },	// QUEEN CAPTURES
		{ 0, KxR, QxR, RxR, BxR, NxR, PxR },	// ROOK CAPTURES
		{ 0, KxB, QxB, RxB, BxB, NxB, PxB },	// BISHOP CAPTURES
		{ 0, KxN, QxN, RxN, BxN, NxN, PxN },	// KNIGHT CAPTURES
		{ 0, KxP, QxP, RxP, BxP, NxP, PxP },	// PAWN CAPTURES
	};
}
